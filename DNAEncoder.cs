using System.Data.SQLite;
using System.Text;

namespace Lacuna_Dev_Admission;

public class DnaEncoder
{

    /*
     *{
    "job": {
        "id": ""d8d828d5248d4bcf940e9f688f721f6e",
        "type": "EncodeStrand",
        "strand": "CATGTCGGGAGCCTCGTTACCTTCCGAAAGTCGGTTGTACACGTGCCCACGGGTGCTGAGAGCGGCTCGTCCTCTACGTCCGATATAGGGGGAGACGCGCCAACAGACTGCCCATGGGCAGTATCCCAACGCCGACGACAAATACCCACCCATGCCAGGTACATAATAAATGGAGGCAAGCTAGACGGTAGTGGCCGGTTAACCCCCTTGTGAGTCCACTTGGAATAACGCTTCTAGGTTCCGTCTGTTCTTAAGTTTTCTACGCTGTGTGAATCATCCCTCACCAGCTCAAGTAACCGGCCCTAGATACTTTCTTAGCTAGCTCCCGCAAAGCTGGCTGCCTACGCGTGGTACGGGCTATCTATGTCCTCTATCCTCAAGCGAAGTCAAATGATACTGTTTCGCGACGCCTTATTTCTGGTTAGACGATTCTCATTTAATACCACAAGAGAGTCCGACTAACCATGGCAACCGTAGGACCGAAGCAAGCTCGCCTTTGCTGCATCACGCGTTGAATAACAGGCACTTGCATCGCAATAATACGGTTGCTACGTTTTGAGTCCCAGGCACCTAGGGTCCTTAGTCGCCTAAGGGTCTAGGCCTGTGTAGCCGTGGTACGTCGCGTAATTTTTTCCCTTGGTGGGTGGTCCTAACAGTACGGGCCCTTCAGCAGACCTAACCACGTAGAGAACGAGCTAGTATCTCTGACTATTAAAAGTCCTTGAATTTGTCACCCCGATATTCGAGAGGGACAGATAGCAAAGGTTTGCGTTACATTGATGGGTATAAACCCGATATAGCATGCAAAATTCTGTAGACAGCCCCGGGAATCACTTTGCATGTGCCAAATTGGGGACTGTTCGTTTTGCACTGGTGGAGCACTATCCATCGTGTGTGTTTGACTAGTCGTTCGCACTGACCGGTCTATACAAGATGTCTGATTCTCACAAAAGCACTATCTCAGCTGTGAGACGCATCGTGTAGGAAATTATCAGAACTATGGTGACACCCGTCGCACCCCTGCCGCCGAACAGTATTTACGGAGGTCCTGTATTCCTGCCTGGATTTGTAATAGCATTCAAGCTTTCGTCGTGACGTCGGGAACAGTCTCGTGAAAATCAACTATGCCTCACTCATTCGTGCGACTAATCGCTGACGCCTCGACCAATCATGCCACGCC"
    },
    "code": "Success"
}
    Should send a POST request to the server with the following JSON body:
    Authorization = 'Bearer <AccessToken>' //
    {
        "strandEncoded": "TtqJdvF9YC2vsRuVGrniJp213G1jMqohmUEh5U6ks1QZYYQMVFTlKxMMDopCchrLpa8FV+4tR+gwZ9yvW3vfC/3Ge7g01dFJ0LBaVyMf3ycnVkCenlxm6xqc3O13NdCYLQOMe/Zhl8/evIY90/DFEIi1hwU6QWyhYJCdl/nk0ZvgwSkfk2Qwxr5xv+LVKRcq18tlwq3KXuyW6xtmw//V+urrXBLGpX0khcFGyIGJyzd4c8Atfg/tFWM9iKhIyQK/m8T46swFYzJOQD3shJVqDR/k7lA+qHvb/keuiRzU27u/hy29keFrcxCO3j3RAJHN0nuIZNuygPNIHOuEVtkVeWWBLPxorXs9eXo/sMk9Cf224bagS3bgDQc5dHT25hw2eGXYUNOUZQ=="
    }
     */
    public static string EncodeDna(string dna)
    {
        // Create a dictionary to store the binary codes for each nucleobase
        var nucleobaseCodes = new Dictionary<char, byte>
        {
            { 'A', 0b00 },
            { 'C', 0b01 },
            { 'T', 0b11 },
            { 'G', 0b10 }
        };

        // Convert the DNA string to an array of bytes
        byte[] dnaBytes = dna
            .Select(c => nucleobaseCodes[c])
            .ToArray();
        Console.WriteLine($"DNA encoded!");

        
        string binaryAsAscii = string.Join("", dnaBytes.Select(x => Convert.ToString(x, 2).PadLeft(2, '0')));
        byte[] bytes = Enumerable.Range(0, binaryAsAscii.Length / 8)
            .Select(i => Convert.ToByte(binaryAsAscii.Substring(i * 8, 8), 2))
            .ToArray();

        return Convert.ToBase64String(bytes);
        // Now convert the binary string to Base64

    }

}
